// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/file/file_store.go

// Package mock_file is a generated GoMock package.
package mock_file

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	file "github.com/mfsyahrz/image_feed_api/internal/infrastructure/filestore"
)

// MockFileStore is a mock of FileStore interface.
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreMockRecorder
}

// MockFileStoreMockRecorder is the mock recorder for MockFileStore.
type MockFileStoreMockRecorder struct {
	mock *MockFileStore
}

// NewMockFileStore creates a new mock instance.
func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &MockFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStore) EXPECT() *MockFileStoreMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockFileStore) Save(ctx context.Context, file file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileStoreMockRecorder) Save(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileStore)(nil).Save), ctx, file)
}
