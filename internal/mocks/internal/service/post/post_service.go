// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/post/post_service.go

// Package mock_post is a generated GoMock package.
package mock_post

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pagination "github.com/mfsyahrz/image_feed_api/internal/common/pagination"
	entity "github.com/mfsyahrz/image_feed_api/internal/domain/entity"
	repository "github.com/mfsyahrz/image_feed_api/internal/domain/repository"
	post "github.com/mfsyahrz/image_feed_api/internal/service/post"
)

// MockPostService is a mock of PostService interface.
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService.
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance.
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostService) Create(ctx context.Context, input *post.CreatePostInput) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostServiceMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostService)(nil).Create), ctx, input)
}

// GetPaginated mocks base method.
func (m *MockPostService) GetPaginated(ctx context.Context, input repository.GetPostInput) (entity.Posts, *pagination.PostCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", ctx, input)
	ret0, _ := ret[0].(entity.Posts)
	ret1, _ := ret[1].(*pagination.PostCursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockPostServiceMockRecorder) GetPaginated(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockPostService)(nil).GetPaginated), ctx, input)
}

// SaveImage mocks base method.
func (m *MockPostService) SaveImage(ctx context.Context, fileHeader *multipart.FileHeader) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, fileHeader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockPostServiceMockRecorder) SaveImage(ctx, fileHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockPostService)(nil).SaveImage), ctx, fileHeader)
}
